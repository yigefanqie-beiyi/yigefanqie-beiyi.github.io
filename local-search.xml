<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>“从零搭建操作系统” 第三章 完善MBR</title>
    <link href="/2024/12/23/%E2%80%9C%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%9D%20%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <url>/2024/12/23/%E2%80%9C%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%9D%20%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="3-1-实模式下的寄存器"><a href="#3-1-实模式下的寄存器" class="headerlink" title="3.1 实模式下的寄存器"></a>3.1 实模式下的寄存器</h2><p>CPU中的寄存器大致可分为两类：</p><ul><li>供内部使用，对程序员不可见：如全局描述符表寄存器GDTR,中断描述符表寄存器IDTR,任务寄存器TR等</li><li>对程序员可见，可直接操作：在实模式下默认的寄存器都是16位宽，可分为段寄存器和通用寄存器</li></ul><p>段寄存器：</p><ul><li>在实模式下，段寄存器用来存储段基址，作用是指定一片内存的起始地址。实模式下要乘以16</li><li>在保护模式下，段寄存器存储的是选择子，作用也是指定一片内存的起始地址。</li><li>CS代码段寄存器，DS数据段寄存器，ES附加段寄存器，FS附加段寄存器，GS附加段寄存器，SS栈段寄存器</li><li>采用直接寻址如[0x1234]时，默认段寄存器为CS，除非指明了[fs:0x1234]，采用基址寻址时，操作数可用bx寄存器或bp寄存器，bx默认段寄存器DS，bp默认段寄存器为SS。</li></ul><p>通用寄存器：<br><img src="/../img/f9fb637d2b5ecada0f2b43a3fe5c3dd2.png" title="通用寄存器介绍"></p><h2 id="3-2-利用IO接口控制显卡"><a href="#3-2-利用IO接口控制显卡" class="headerlink" title="3.2 利用IO接口控制显卡"></a>3.2 利用IO接口控制显卡</h2><p>IO接口是连接CPU和硬件的桥梁，在主板上由南桥芯片和北桥芯片负责，端口是IO接口给CPU的接口。IA32体系中，由于存储端口号的寄存器是16位，因此最大有65535个端口。<br>CPU提供专门的指令in和out进行端口读写，例如<code>in al, dx</code> <code>out dx, al</code><br>助记：左边是目的操作数，右边是源操作数，dx只作端口号使用，al或ax可存储数据使用</p><p>MBR中直接操控显存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs nasm">mov ax,0xb800 ; ax为文本信号起始区<br>mov ds,ax     ; ds = ax = 0xb800 寄存器寻址默认段寄存器为ds<br><br>;设置屏幕模式为文本模式，清除屏幕<br>mov ax, 3<br>int 0x10 <br><br>;直接操作显存部分,输出Booting!,立即数寻址默认段寄存器为ds，<br>mov byte [0x00],&#x27;B&#x27; ;低位字节储存ascii字符 小端储存内存顺序相反<br>mov byte [0x01],0x07    ;背景储存在第二个字节<br><br>mov byte [0x02],&#x27;o&#x27; <br>mov byte [0x03],0x07    ;默认属性黑底白字<br><br>mov byte [0x04],&#x27;o&#x27; <br>mov byte [0x05],0x07<br><br>mov byte [0x06],&#x27;t&#x27; <br>mov byte [0x07],0x07<br><br>mov byte [0x08],&#x27;i&#x27; <br>mov byte [0x09],0x07<br><br>mov byte [0x0A],&#x27;n&#x27; <br>mov byte [0x0B],0x07<br><br>mov byte [0x0C],&#x27;g&#x27; <br>mov byte [0x0D],0x07<br><br>mov byte [0x0E],&#x27;!&#x27; <br>mov byte [0x0F],0x07<br><br>mov ax, 0<br>mov ds, ax      ;让段寄存器回到0!!<br></code></pre></td></tr></table></figure><p>需要注意，显存每个字符需要两个字节，低字节是字符的ASCII码，高字节是字符的属性，如颜色、背景等</p><h2 id="3-3-让MBR读取硬盘"><a href="#3-3-让MBR读取硬盘" class="headerlink" title="3.3 让MBR读取硬盘"></a>3.3 让MBR读取硬盘</h2><p>目前硬盘结构每个扇区占512字节，而扇区0存储了MBR的代码，MBR的代码会被BIOS从硬盘加载到内存0x7c00处，但MBR固定512字节，能够完成的事情不多，因此在这里完成了基本的寄存器初始化以及打印显存引导信息后，需要把控制权移交到别处完成更多指令，这个“别处”就是以后要写的Loader.S，我们把它放到硬盘的第二扇区，中间空了扇区1是因为想隔开MBR和Loader。</p><p>MBR是BIOS加载到内存的，但Loader没法被BIOS加载到内存，因此这部分工作需要由MBR完成。</p><p>硬盘控制器属于IO接口，我们需要读写硬盘控制器的端口<br>硬盘控制机主要端口寄存器:</p><table><thead><tr><th><strong>IO端口</strong></th><th><strong>端口用途</strong></th><th><strong>Primary通道</strong></th><th><strong>Secondary通道</strong></th><th><strong>读操作时</strong></th><th><strong>写操作时</strong></th></tr></thead><tbody><tr><td>0x1f0</td><td>Data</td><td>0x1f0</td><td>0x170</td><td>Data</td><td>Data</td></tr><tr><td>0x1f1</td><td>Error</td><td>0x1f1</td><td>0x171</td><td>Error</td><td>Features</td></tr><tr><td>0x1f2</td><td>Sector count</td><td>0x1f2</td><td>0x172</td><td>Sector count</td><td>Sector count</td></tr><tr><td>0x1f3</td><td>LBA low</td><td>0x1f3</td><td>0x173</td><td>LBA low</td><td>LBA low</td></tr><tr><td>0x1f4</td><td>LBA mid</td><td>0x1f4</td><td>0x174</td><td>LBA mid</td><td>LBA mid</td></tr><tr><td>0x1f5</td><td>LBA high</td><td>0x1f5</td><td>0x175</td><td>LBA high</td><td>LBA high</td></tr><tr><td>0x1f6</td><td>Device</td><td>0x1f6</td><td>0x176</td><td>Device</td><td>Device</td></tr><tr><td>0x1f7</td><td>Status</td><td>0x1f7</td><td>0x177</td><td>Status</td><td>Command</td></tr><tr><td>0x3f6</td><td>Alternate status</td><td>0x3f6</td><td>0x376</td><td>Alternate status</td><td>Device Control</td></tr></tbody></table><p>MBR中读取硬盘：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs nasm">    mov  eax, LOADER_START_SECTOR     ;起始扇区号，2<br>    mov bx, LOADER_BASE_ADDR        ;要写入的内存地址，0x900<br>    mov cx, 4       ;读取的扇区数量<br>    call read_disk<br><br>    xchg bx, bx<br>    jmp LOADER_BASE_ADDR;       系统跳转到内存0x900处进行loader<br><br>; eax=要读取的LBA起始扇区号， bx=读取扇区后要写入的内存地址， cx=读取的扇区数<br>read_disk:<br>    mov esi, eax    ;备份eax<br>    mov di, cx      ;备份cx<br>    ;读写硬盘<br>    ;第1步：设置要读取的扇区数量<br>    mov dx, 0x1f2<br>    mov al, cl      ;删了可以吗?<br>    out dx, al;<br>    mov eax, esi<br>    ;第2步，将要读的起始扇区的地址存入对应端口<br>        ;低8位，0x1f3<br>    mov dx, 0x1f3<br>    out dx, al<br>        ;中8位，0x1f4<br>    mov cl, 8<br>    shr eax, cl<br>    mov dx, 0x1f4<br>    out dx, al<br>        ;高8位，0x1f5<br>    shr eax, cl<br>    mov dx, 0x1f5<br>    out dx, al<br>        ;最高的4位对应device寄存器的低4位，采用主盘LBA模式的话，device高4位是1110<br>    shr eax, cl<br>    and al, 0x0f<br>    or al, 0xe0<br>    mov dx, 0x1f6<br>    out dx, al<br>    ;第3步，向0x1f7端口写入读命令，0x20<br>    mov al, 0x20<br>    mov dx, 0x1f7<br>    out dx, al<br>    ;第4步，读取0x1f7端口，检测硬盘状态<br>  .noready:<br>    nop<br>    in al, dx<br>    and al, 0x88    ;第3位为1说明硬盘准备好数据传输，第7位为1说明硬盘繁忙<br>    cmp al, 0x08<br>    jnz .noready<br>    ;第5步，从0x1f0端口即data寄存器读取数据<br>    mov ax, di  ;di是要读取的扇区数<br>    mov dx, 256<br>    mul dx<br>    mov cx, ax  ;将要读取的次数存到cx<br>    mov dx, 0x1f0<br>  .keep_read:<br>    in ax, dx<br>    mov [bx], ax<br>    add bx, 2<br>    loop .keep_read<br>    ret<br></code></pre></td></tr></table></figure><p>通过<code>call read_disk</code>然后<code>jmp LOADER_BASE_ADDR</code>，LOADER_BASE_ADDR设定为0x900，CPU将离开MBR区域，跳转到起始内存地址为0x900的Loader区域。</p>]]></content>
    
    
    <categories>
      
      <category>从零搭建操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>“从零搭建操作系统” 第二章 编写MBR主引导记录</title>
    <link href="/2024/12/21/%E2%80%9C%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%9D%20%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2024/12/21/%E2%80%9C%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%9D%20%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="2-1-计算机的启动过程"><a href="#2-1-计算机的启动过程" class="headerlink" title="2.1 计算机的启动过程"></a>2.1 计算机的启动过程</h2><p>操作系统可以存储在硬盘上，软盘上，甚至U盘上，但CPU被设计成只能执行内存上的程序，因此需要把操作系统加载到内存上。</p><p>简单描述：主机上电，第一个执行的程序是BIOS，BIOS将MBR加载到内存0x7c00处，执行MBR，直到跳转至Loader，执行Loader，直到完成实模式到保护模式的跳转，并进入内核。</p><h2 id="2-2-什么是BIOS"><a href="#2-2-什么是BIOS" class="headerlink" title="2.2 什么是BIOS"></a>2.2 什么是BIOS</h2><p>全称，基本输入输出系统，是计算机上电执行的第一个程序。</p><h3 id="2-2-1-实模式的1MB内存布局"><a href="#2-2-1-实模式的1MB内存布局" class="headerlink" title="2.2.1 实模式的1MB内存布局"></a>2.2.1 实模式的1MB内存布局</h3><p><img src="/../img/5ae7e0414b7ea26b47afee774a6add0d.jpg" title="实模式的1MB内存布局"><br>要点：</p><ul><li>中断向量表IVT：在最低的1KB内存中，里面存储了不同中断向量号对应的入口程序，程序的具体内容不是存储在内存或者硬盘中的，是存储在固件中的，可能是闪存或BIOS芯片。</li><li>可用区域有：0x500-0x7bff约30KB  0x7e00-0x9fbff约608KB</li><li>MBR：起始地址在0x7c00，固定大小512字节</li><li>文本模式显存：0xb8000，占32KB</li><li>系统BIOS范围：0xF0000-0xFFFFF共640KB，其中0xFFFF0-0xFFFFF是BIOS入口地址。</li></ul><h3 id="2-2-2-地址总线"><a href="#2-2-2-地址总线" class="headerlink" title="2.2.2 地址总线"></a>2.2.2 地址总线</h3><p>以16位系统为例，其地址总线是20位，地址范围是1MB，访问内存的上限取决于地址总线而不是物理内存的上限，32位系统的地址总线是32位，范围是4GB，就算插入4GB的内存条，我们可用的内存也只有3.8G左右，因为地址总线需要预留一些地址用于访问外设。</p><h3 id="2-2-3-BIOS的苏醒过程"><a href="#2-2-3-BIOS的苏醒过程" class="headerlink" title="2.2.3 BIOS的苏醒过程"></a>2.2.3 BIOS的苏醒过程</h3><ol><li>BIOS被存储到只读存储器ROM里，ROM不可擦除，这一部分被映射到低端1MB内存的顶部，即0xF0000-0xFFFFF。</li><li>程序一上电，cpu的cs:ip被强制初始化到0xf000:0xfff0处，系统一开始处于实模式，寄存器默认16位，地址总线是20位，访问内存上限为1MB，实模式下内存访问的计算为：段基地址左移4位+偏移地址，因此0xf000:0xfff0对应为0xffff0。因此程序上电，CPU强制执行0xffff0处指令，此处指令占16字节，为jmp f000:e05b，即0xfe05b，BIOS代码真正开始执行的地方。</li><li>BIOS开始检测内存、显存等一系列外设信息，初始化部分硬件，在内存0x000-0x3ff中建立IVT并填写中断例程入口，并在最后跳转到内存的0x7c00处执行指令。</li></ol><h3 id="2-2-4-为什么是0x7c00"><a href="#2-2-4-为什么是0x7c00" class="headerlink" title="2.2.4 为什么是0x7c00"></a>2.2.4 为什么是0x7c00</h3><p>不为什么，历史遗留问题，没必要细究</p><h2 id="2-3-MBR"><a href="#2-3-MBR" class="headerlink" title="2.3 MBR"></a>2.3 MBR</h2><h3 id="2-3-1-什么叫MBR"><a href="#2-3-1-什么叫MBR" class="headerlink" title="2.3.1 什么叫MBR"></a>2.3.1 什么叫MBR</h3><ol><li>MBR叫主引导扇区，是BIOS执行到最后跳转的地方，其中包括内容有：<br> 446字节的引导程序以及参数<br> 64字节的分区表<br> 2字节的结束标记，即魔数0x55 0xaa</li><li>MBR一般位于硬盘的0盘0道1扇区</li><li>通过MBR开始引导计算机</li></ol><h3 id="2-3-2-开始写MBR"><a href="#2-3-2-开始写MBR" class="headerlink" title="2.3.2 开始写MBR"></a>2.3.2 开始写MBR</h3><p>boot.S:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs nasm">SECTION MBR vstart=0x7c00 ;起始地址编译在0x7c00<br>    mov ax,cs<br>    mov ds,ax<br>    mov es,ax<br>    mov ss,ax<br>    mov fs,ax<br>    mov sp,0x7c00<br>    ;这个时候 ds = es = ss = 0 栈指针指向MBR开始位置<br><br><br>    ;ah = 0x06 al = 0x00 想要调用int 0x06的BIOS提供的中断对应的函数 即向上移动即完成清屏功能<br>    ;cx dx 分别存储左上角与右下角的左边 详情看int 0x06函数调用<br>    mov ax,0x600 <br>    mov bx,0x700<br>    mov cx,0<br>    mov dx,0x184f<br>    <br>    ;调用BIOS中断<br>    int 0x10 <br><br>    mov ah,3<br>    mov bh,0<br>    <br>    ;获取光标位置 需要打印信息<br>    int 0x10<br>    <br>    mov ax,message<br>    mov bp,ax<br>    <br>    mov cx,5<br>    mov ax,0x1301<br>    <br>    mov bx,0x71;白底蓝字好cooi<br>    <br>    int 0x10 ;写字符串<br>    <br>    jmp $ ;无限循环 一直跳转到当前命令位置<br>    <br>    ;字符串声明 db == define byte dw == define word ascii一个字符占一个字节<br>    message db &quot;1 MBR&quot; <br>    <br>    ;预留两个字节 其余空余的全部用0填满 为使检测当前扇区最后两字节为0x55 0xaa 检测是否为有效扇区<br>    ;510 = 512字节-2预留字节  再减去（当前位置偏移量-段开始位置偏移量）求出来的是剩余空间<br>    times 510 - ($ - $$) db 0 <br>    db 0x55,0xaa<br></code></pre></td></tr></table></figure><p>要点：</p><ol><li>利用了BIOS中断int 0x10进行打印（还未利用显卡驱动）</li><li><code>SECTION MBR vstart=0x7c00</code>告诉编译器将该段程序编译在0x7c00处</li><li><code>times 510 - ($ - $$) db 0</code>填充空余的部分，保证该段程序加上后面的魔数0x55，0xaa是512字节。</li></ol><h3 id="2-3-3-编译MBR，存到硬盘"><a href="#2-3-3-编译MBR，存到硬盘" class="headerlink" title="2.3.3 编译MBR，存到硬盘"></a>2.3.3 编译MBR，存到硬盘</h3><ol><li>内存里加载的程序都是二进制文件，而我们写的代码还没有经过编译成bin文件，需要利用指令<code>nasm -o boot.bin boot.S</code>进行编译。</li><li>理论上计算机会将硬盘的0盘0道1扇区的MBR加载到内存0x7c00处，我们的环境是在Ubuntu上的，文件boot.S和boot.bin都是在Ubuntu系统上，需要利用bochs创建镜像硬盘镜像，并利用dd命令将boot.bin复制到硬盘镜像的第一个扇区处，模拟成实际的环境，这样cpu才找得到MBR并把它加载到由bochs模拟的内存上。</li><li>目前镜像硬盘设置为60M，内存设置为32M</li><li>dd命令示例：<code>dd if=/home/cooiboi/bochs/mbr.bin of=/home/cooiboi/bochs/hd60M.img bs=512 count=1 conv=notrunc</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>从零搭建操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>“从零搭建操作系统” 第一章 环境部署</title>
    <link href="/2024/12/21/%E2%80%9C%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%9D%20%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2024/12/21/%E2%80%9C%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%9D%20%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>需要写C文件和汇编文件，C文件利用GCC编译，汇编文件用NASM编译</p><h3 id="GCC编译器"><a href="#GCC编译器" class="headerlink" title="GCC编译器"></a>GCC编译器</h3><p>GCC（GNU Compiler Collection）是一个由GNU项目开发和维护的编译器集合，它支持多种编程语言，包括C、C++、Objective-C、Fortran、Ada和Go等。</p><p>我们利用GCC将c文件经过预处理、编译、汇编生成目标文件.o文件，.o文件包含了编译器生成的机器代码，但尚未被链接成最终的可执行文件。</p><h3 id="NASM编译器"><a href="#NASM编译器" class="headerlink" title="NASM编译器"></a>NASM编译器</h3><p>NASM（Netwide Assembler）是一个开源的汇编器，主要用于编写和编译x86和x86-64架构的汇编代码。它以其简洁的语法、易用性和对新处理器指令的支持而闻名。</p><p>我们利用nasm将.S汇编文件汇编成目标文件.o文件。</p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>利用Vmware装Ubuntu系统，在Ubuntu上进行开发</p><h2 id="硬件模拟器Bochs"><a href="#硬件模拟器Bochs" class="headerlink" title="硬件模拟器Bochs"></a>硬件模拟器Bochs</h2><p>Bochs是一个开源的x86硬件模拟器，它能够模拟整个PC硬件环境，包括CPU、内存、显卡、硬盘、网络等设备</p><p>利用Bochs配置硬件环境，可以在bochsrc的配置文件里进行配置，如内存大小</p><p>Bochs另一个重要功能是创建虚拟硬盘，操作系统无论如何也是存储在硬盘上的，因此肯定需要一个虚拟硬盘作为载体。</p><p>应该也可以用qemu，但我不会</p><h2 id="远程开发Vscode"><a href="#远程开发Vscode" class="headerlink" title="远程开发Vscode"></a>远程开发Vscode</h2><p>利用windows环境下的vscode，远程ssh连接虚拟机上的Ubuntu系统，方便开发。</p>]]></content>
    
    
    <categories>
      
      <category>从零搭建操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>“从零搭建操作系统” 记录</title>
    <link href="/2024/12/21/%E2%80%9C%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E8%AE%B0%E5%BD%95%E2%80%9D/"/>
    <url>/2024/12/21/%E2%80%9C%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E8%AE%B0%E5%BD%95%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="2024-12-21"><a href="#2024-12-21" class="headerlink" title="2024.12.21"></a>2024.12.21</h3><p>跟随《操作系统真象还原》这本书学习，共15章，目前已学完12章，随着对操作系统的深入感觉知识体系过于混乱，决定从头梳理前12章的内容，并记录在blog。</p><p>后三章分别是编写硬盘驱动程序，文件系统，系统交互（fork、shell、pipe等），逐渐偏向用户开发而不是内核开发，先吃透内核开发免得和用户开发混在一起。</p><p>冬至快乐！</p>]]></content>
    
    
    <categories>
      
      <category>从零搭建操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>系统命令</title>
    <link href="/2024/12/18/hello-world/"/>
    <url>/2024/12/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
